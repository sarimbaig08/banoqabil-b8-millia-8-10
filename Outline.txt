-> Brainstroming related to Web development and html, css, js
-> Introduction to React js
-> Seting up a react project
-> Project flow 
-> Components
-> Adding css to html
-> UseState Hook
-> Arrow functions & Onclick
-> Ternary Opr, Conditional Rendering
-> Responding to envent:
-> Onclick
-> Onchange
-> Props, Parent child data and function passing
-> Inline conditional styling
-> Array of objects
-> Map
-> Dynamic product cards mapping
-> Toggle condition, Dynamic mapping
-> UseEffect
-> Routing: routes, nested routes, outlets
-> 3 types of navigation: Link, Navlink, UseNavigate hook
-> Dynamic Routes, Use Params
-> Optional Chaining ?
-> Props Drilling
-> How to solve props drilling --> Usecontext api
-> Axios 
	const response = await axios.get(
        `https://fakestoreapi.com/products/${id}`
     	 );
-> UseRef
-> Callback function ( child communication with parent)
-> Props Destructuring 
-> Children Prop
-> Redux




--Redux
--location


--Optional Route /home/:id?/:name?/list?
--Spread operator
--Find
--Proj



--React component lifecycle: mounting, updating, unmounting
--Forms handling
--Ui libraries
--Routing: dynamic routes
--Tailwind Css

    fetch('https://fakestoreapi.com/products')
      .then(res => res.json())
      .then(data =>  console.log(data));


Or combine rest props:

function Input({ label, ...rest }) {
  return (
    <div>
      <label>{label}</label>
      <input {...rest} />
    </div>
  );
}

rop Spreading
You can forward all props from one component to another:

function Button(props) {
  return <button {...props} />; // passes all props (like onClick, className, etc.)
}

